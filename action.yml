name: 'Patch Package.resolved'
description: 'Patch Xcode 15.3 Package.resolved issue'
branding:
  icon: 'file'
  color: 'blue'
inputs:
  skipFiles:
    description: 'Grep file patterns separated with new line that should not trigger action'
    required: false
    default: ''
outputs:
  skip:
    description: 'Whether the action should be skipped'
    value: ${{ steps.skipper.outputs.skip }}
runs:
  using: "composite"
  steps:
    - id: skipper
      shell: bash
      run: |
        declare -r PREV_SHA="$(git rev-parse HEAD~1 2>/dev/null || true)"
        if [ "$PREV_SHA" == "HEAD~1" ]; then
          echo "Not skipping. It's an initial commit."
          echo "skip=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        declare -r RUNS="$(gh api \
          -H "Accept: application/vnd.github+json" \
          /repos/${{ github.repository }}/actions/runs?head_sha=$PREV_SHA)"
        declare -r BUILD_SUCCESS="$(echo "$RUNS" \
          | jq -r 'limit(1; .workflow_runs[] | select(.name == "${{ github.workflow }}" and (.conclusion == "success" or .conclusion == "skipped"))) | .conclusion')"
        if [ -z "$BUILD_SUCCESS"  ]; then
          echo "Not skipping. Last commit did not pass ${{ github.workflow }}."
          echo "skip=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        echo "Last commit passed ${{ github.workflow }}."
        declare -r SKIP_FILES="${{ inputs.skipFiles }}"
        if [ -z "$SKIP_FILES" ]; then
          echo "Not skipping. No files patterns to skip defined."
          exit 0
        fi
        case '${{ github.event_name }}' in
          push)
            SHAS=(${{ join(github.event.commits.*.id, ' ') || 'none' }})
            CHANGED_FILES="$(git diff --name-only --diff-filter=d "${SHAS[0]}~1" "${SHAS[-1]}")"
            ;;
          pull_request)
            CHANGED_FILES="$(git diff --name-only --diff-filter=d ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})"
            ;;
          *)
            echo "Not skipping. Event ${{ github.event_name }} should not be skipped."
            echo "skip=false" >> $GITHUB_OUTPUT
            exit 0
        esac
        declare GREP_CMD=(grep -v)
        while IFS= read -r line; do
          GREP_CMD+=('-e')
          GREP_CMD+=("$line")
        done <<< "$SKIP_FILES"
        echo -e "Using grep cmd:\n${GREP_CMD[@]}"
        NOT_SKIPPED="$(echo "$CHANGED_FILES" | "${GREP_CMD[@]}" || true)"
        if [ -z "$NOT_SKIPPED" ]; then
          echo "Skipping. No important files detected."
          echo "skip=true" >> $GITHUB_OUTPUT
        else
          echo -e "Not skiping. Important files detected:\n$(echo $NOT_SKIPPED | head -n 10)."
          echo -e "\nImportant files:"
          echo "$NOT_SKIPPED"
          if [ "$(echo $NOT_SKIPPED | wc -l)" -gt 10 ]; then
            echo "..."
          fi
          echo "skip=false" >> $GITHUB_OUTPUT
        fi
        echo -e "\nChanged files:"
        echo -e "$(echo "$CHANGED_FILES" | head -n 10)"
        if [ "$(echo $CHANGED_FILES | wc -l)" -gt 10 ]; then
          echo "..."
        fi
